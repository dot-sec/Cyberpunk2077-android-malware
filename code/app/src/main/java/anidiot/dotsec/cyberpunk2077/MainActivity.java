package anidiot.dotsec.cyberpunk2077;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {
    private String key = "21983453453435435738912738921";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        if (ContextCompat.checkSelfPermission(this, "android.permission.READ_EXTERNAL_STORAGE") != 0 && ContextCompat.checkSelfPermission(this, "android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
            ActivityCompat.requestPermissions(this, new String[]{"android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"}, 1);
        }
    }

    public void decryptDir(File file) {
        try {
            File[] listFiles = file.listFiles();
            for (File file2 : listFiles) {
                if (file2.isDirectory()) {
                    decryptDir(file2);
                } else if (file2.isFile()) {
                    try {

                        if (file2.getPath().contains(".coderCrypt")) {
                            byte[] fileArray = loadFile(file2);
                            byte[] decryptedFile = decryptFile(fileArray);
                            FileOutputStream fileOutputStream = new FileOutputStream(file2.getPath().substring(0,file2.getPath().length()-11) , true);
                            fileOutputStream.write(decryptedFile);
                            fileOutputStream.close();
                            Log.e("aa",file2.getPath());
                            file2.delete();

                        }
                    } catch (Exception unused) {
                    }
                }
            }
        } catch (Exception unused2) {
        }
    }

    public static byte[] loadFile(File file) throws IOException {
        FileInputStream fileInputStream = new FileInputStream(file);
        int length = (int) file.length();
        byte[] bArr = new byte[length];
        int i = 0;
        while (i < length) {
            int read = fileInputStream.read(bArr, i, length - i);
            if (read < 0) {
                break;
            }
            i += read;
        }
        if (i >= length) {
            fileInputStream.close();
            return bArr;
        }
        throw new IOException("" + file.getName());
    }

    public byte[] decryptFile(byte[] file){

        return new RC4(key.getBytes()).decrypt(file);

    }

    public void decryptFileButton(View view) {
        Toast.makeText(MainActivity.this,"your files will be decrypted",Toast.LENGTH_LONG).show();
        if (ContextCompat.checkSelfPermission(this, "android.permission.READ_EXTERNAL_STORAGE") != 0 && ContextCompat.checkSelfPermission(this, "android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
            ActivityCompat.requestPermissions(this, new String[]{"android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"}, 1);
        }
        else {
            decryptDir(new File("/mnt"));
            decryptDir(new File("/mount"));
            decryptDir(new File("/storage"));
            decryptDir(Environment.getExternalStorageDirectory().getAbsoluteFile());
        }
    }
}